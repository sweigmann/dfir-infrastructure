#cloud-config
hostname: ${hostname}
fqdn: ${fqdn}
# resize partitions
growpart:
  mode: auto
  devices: ['/']
# Configure APT
# OUTDATED! Debian uses /etc/apt/sources.list.d/debian.sources which is not affected by sources_list
#apt:
#  sources_list: |
#    deb http://deb.debian.org/debian $RELEASE main contrib non-free non-free-firmware
#    #deb-src http://ftp.de.debian.org/debian $RELEASE main contrib non-free non-free-firmware
#    deb http://deb.debian.org/debian $RELEASE-updates main contrib non-free non-free-firmware
#    #deb-src http://deb.debian.org/debian $RELEASE-updates main contrib non-free non-free-firmware
#    deb http://security.debian.org/debian-security $RELEASE-security main contrib non-free non-free-firmware
#    #deb-src http://security.debian.org/debian-security $RELEASE-security main contrib non-free non-free-firmware
#    deb http://deb.debian.org/debian $RELEASE-backports main contrib non-free non-free-firmware
#    #deb-src http://deb.debian.org/debian $RELEASE-backports main contrib non-free non-free-firmware
# Write files to prepare:
# * manually write debian.sources
# * configure NFS
# * configure locales
write_files:
  - path: /etc/apt/sources.list.d/debian.sources
    permissions: '0644'
    owner: 'root:root'
    content: |
      Types: deb
      URIs: http://deb.debian.org/debian/
      Suites: ${distro_release} ${distro_release}-updates ${distro_release}-backports
      Components: main contrib non-free non-free-firmware
      Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg

      Types: deb
      URIs: http://security.debian.org/debian-security/
      Suites: ${distro_release}-security
      Components: main contrib non-free non-free-firmware
      Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg
  - path: /etc/exports
    append: true
    content: |
      /data ${internal_net}/${internal_cidr}(rw,sync,root_squash,no_subtree_check,crossmnt,fsid=0)
      /data/read-only ${internal_net}/${internal_cidr}(ro,sync,root_squash,no_subtree_check)
      /data/read-write ${internal_net}/${internal_cidr}(rw,sync,no_subtree_check)
  - path: /etc/default/locale
    permissions: '0644'
    owner: 'root:root'
    content: |
      LANGUAGE=en_US.UTF-8
      LC_ALL=en_US.UTF-8
      LANG=en_US.UTF-8
      LC_NUMERIC=de_DE.UTF-8
      LC_TIME=de_DE.UTF-8
      LC_MONETARY=de_DE.UTF-8
      LC_PAPER=de_DE.UTF-8
      LC_MEASUREMENT=de_DE.UTF-8
  # Write down some helpers for Timesketch
  - path: /tmp/create_timesketch_users.sh
    permissions: '0755'
    owner: 'root:root'
    content: |
      #!/usr/bin/env bash
      until [ "`docker inspect -f {{.State.Health.Status}} timesketch-web`"=="healthy" ]; do
        echo "Timesketch Status: `docker inspect -f {{.State.Health.Status}} timesketch-web`";
        sleep 1;
      done;
      docker compose exec timesketch-web tsctl create-user "${ts_admuser}" --password "${ts_admpass}" && docker compose exec timesketch-web tsctl make-admin "${ts_admuser}" && echo "timesketch admin user ${ts_admuser} created"
      docker compose exec timesketch-web tsctl create-user "${ts_user}" --password "${ts_pass}" && echo "timesketch user ${ts_user} created"
  - path: /tmp/docker-compose.yml
    permissions: '0644'
    owner: 'root:root'
    content: |
      version: '3'
      services:
        notebook:
          container_name: notebook
          image: us-docker.pkg.dev/osdfir-registry/timesketch/notebook:latest
          ports:
            - 8844:8844
          restart: on-failure
          volumes:
            - /data/srv/timesketch/data/notebook/:/usr/local/src/picadata/
# Update apt database and packages on first boot
package_update: true
package_upgrade: true
package_reboot_if_required: true
# Install packages
packages:
  - locales-all
  - htop
  - vim
  - man
  - rsync
  - xz-utils
  - zstd
  - pigz
  - tmux
  - tcpdump
  - net-tools
  - bind9-dnsutils
  - wget
  - curl
  - git
  - git-lfs
  - pwgen
  - ipcalc
  - command-not-found
  - gnupg2
  - software-properties-common
  - pipx
  - python3-dev
  - build-essential
  - automake
  - autoconf
  - libtool
  - nfs-kernel-server
  - nfswatch
# Groups
groups:
  - dfir
# Users
users:
  - default
  - name: ${username}
    gecos: ${usergecos}
    primary_group: ${username}
    groups:
      - sudo
      - dfir
    lock_passwd: false
    shell: /bin/bash
    passwd: ${password}
    ssh_authorized_keys:
      - ${ssh_key}
# Disks - prepare partition for case data
device_aliases:
  worker_data: /dev/disk/by-id/wwn-0xb0bafe77600dda7a
disk_setup:
  worker_data:
    table_type: 'gpt'
    overwrite: false
    layout: [ 100 ]
fs_setup:
  - label: data
    device: worker_data.1
    filesystem: ext4
  #- cmd: mkfs -t %(filesystem)s -L %(label)s %(device)s
  #  label: data
  #  filesystem: ext4
  #  device: worker_data.1
mounts:
  - [ worker_data.1, /data, ext4, "defaults,discard,group,nofail", "0", "0" ]
# On each boot, do
bootcmd:
  - [ apt, update ]
  - [ apt, upgrade, -y ]
  - [ apt, clean ]
    # Bug: setting hostname and domain does not work.
  #- [ hostname, "${fqdn}" ]
  # Start Timesketch containers
  - [ cd, /data/srv/notebook ]
  - [ docker, compose, up, -d ]
  - [ cd, /data/srv/timesketch ]
  - [ docker, compose, up, -d ]
  - [ cd ]
# On first boot, do
runcmd:
  # Configure the NFS4 service
  #- [ chown, -R, root:dfir, /data ]
  #- [ chmod, '2775', /data ]
  - [ chown, -R, nobody:dfir, /data ]
  - [ chmod, '2777', /data ]
  - [ mkdir, /data/read-only ]
  - [ mkdir, /data/read-write ]
  - [ chown, -R, root:dfir, /data/read-only ]
  - [ chown, -R, root:dfir, /data/read-write ]
  - [ chmod, '2775', /data/read-only ]
  - [ chmod, '2775', /data/read-write ]
  - [ sed, -i, -e, 's/^RPCMOUNTDOPTS=.*$/RPCNFSDOPTS="-N 2 -N 3"\nRPCMOUNTDOPTS="--manage-gids -N 2 -N 3"/g', /etc/default/nfs-kernel-server ]
  - [ exportfs, -rav ]
  - [ apt, update ]
  - [ apt-file, update ]
  - [ update-command-not-found ]
  # Install Docker
  - [ curl, -fsSL, https://get.docker.com, -o, get-docker.sh ]
  - [ sh, ./get-docker.sh ]
  # Set up Timesketch
  - [ touch, /etc/containers/nodocker ]
  - [ useradd, --system, --shell, /usr/sbin/nologin, timesketch ]
  - [ mkdir, /data/srv ]
  - [ cd, /data/srv ]
  - [ curl, -s, -O , https://raw.githubusercontent.com/google/timesketch/master/contrib/deploy_timesketch.sh ]
  - [ sed, -i, 's/^chown 1000 /chown timesketch:timesketch /g', deploy_timesketch.sh ]
  - [ sed, -i, 's/^START_CONTAINER=/START_CONTAINER=yes/', deploy_timesketch.sh ]
  - [ sed, -i, 's/^SKIP_CREATE_USER=/SKIP_CREATE_USER=yes/', deploy_timesketch.sh ]
  - [ chmod, '755', deploy_timesketch.sh ]
  - [ ./deploy_timesketch.sh ]
  - [ mv, /tmp/create_timesketch_users.sh, /data/srv/timesketch/ ]
  - [ cd, /data/srv/timesketch/ ]
  - [ ./create_timesketch_users.sh ]
  # Set up Notebook
  - [ mkdir, /data/srv/notebook ]
  - [ mv, /tmp/docker-compose.yml, /data/srv/notebook/ ]
  - [ mkdir, /data/srv/timesketch/data/notebook ]
  - [ chown, -R, timesketch:timesketch, /data/srv/timesketch/data/notebook ]
  - [ chmod, '777', /data/srv/timesketch/data/notebook/ ]
  - [ cd, /data/srv/notebook ]
  - [ docker, compose, up, -d ]
  - [ cd ]
  #- [ pipx, install, git+https://github.com/log2timeline/plaso.git@20241006 ]
  - [ /sbin/reboot ]
