{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ea15e911",
   "metadata": {},
   "source": [
    "# ${case_id} -- Timesketch Notebook\n",
    "This is a base notebook for connecting to a dev instance of Timesketch.\n",
    "**Remember to rename the notebook**.\n",
    "## Guides\n",
    "* [Timesketch Collab Quickstart](https://colab.research.google.com/github/google/timesketch/blob/master/notebooks/colab-timesketch-demo.ipynb)\n",
    "* [Jupyter Notebook Tutorial](https://www.dataquest.io/blog/jupyter-notebook-tutorial/)\n",
    "* [How to Use Jupyter Notebooks: The Ultimate Guide](https://www.datacamp.com/tutorial/tutorial-jupyter-notebook)"
    "* [Notebook Community Demo](https://notebook.community/google/timesketch/notebooks/jupyter-timesketch-demo)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d84b8e95",
   "metadata": {},
   "source": [
    "## Import\n",
    "To start a notebook we import few base libraries.\n",
    "Execute the cell below by pressing the play button or using \"shift + enter\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb43888f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# @title Import Libraries\n",
    "# @markdown We first need to import libraries that we will use throughout the colab.\n",
    "import sys\n",
    "import altair as alt # For graphing.\n",
    "import numpy as np   # Never know when this will come in handy.\n",
    "import pandas as pd  # We will be using pandas quite heavily.\n",
    "\n",
    "import timesketch_api_client as T\n",
    "from timesketch_api_client import config\n",
    "from timesketch_api_client import client\n",
    "from picatrix.lib import state as state_lib\n",
    "\n",
    "state = state_lib.state()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d37a1083",
   "metadata": {},
   "source": [
    "## Connect to Timesketch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a528b3a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_client = client.TimesketchApi(\n",
    "    host_uri='http://${fqdn}', \n",
    "    username='${ts_user}', \n",
    "    password='${ts_pass}'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0085304d",
   "metadata": {},
   "source": [
    "### Software Versions\n",
    "The cell below will present you the versions of software in use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "102a86e8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# @title Software Versions\n",
    "# @markdown Python\n",
    "print(\"Python...\\nPython %s\\n\" % sys.version)\n",
    "# @markdown Timesketch API Client\n",
    "print(\"Timesketch API Client...\\n%s\\n\" % ts_client.version)\n",
    "# @markdown Jupyter\n",
    "!jupyter --version"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "052397cd",
   "metadata": {},
   "source": [
    "## Sketches\n",
    "### List Sketches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee12df29",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "list_sketches = list(ts_client.list_sketches())\n",
    "print(\"There are %d sketches available:\" % len(list_sketches))\n",
    "for s in ts_client.list_sketches():\n",
    "    print(\"sketch.id:          %s\" % s.id)\n",
    "    print(\"sketch.name:        %s\" % s.name)\n",
    "    print(\"sketch.description: %s\" % s.description)\n",
    "#  print('[{0:d}] {1:s} <{2:s}>'.format(sketch.id, sketch.name, sketch.description))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c766e746",
   "metadata": {},
   "source": [
    "### Select a Sketch\n",
    "Now it is time to select a sketch to use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0dcbf51b",
   "metadata": {},
   "outputs": [],
   "source": [
    "sketch_dict = dict((x.name, x) for x in list_sketches)\n",
    "sketch = sketch_dict.get('investigation', ts_client.get_sketch(1))\n",
    "#sketch = list_sketches[0]\n",
    "print(\"Using Sketch number: %d and name: %s\" % (sketch.id, sketch.name))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1da04ed5",
   "metadata": {},
   "source": [
    "## Searching"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f493e66",
   "metadata": {},
   "source": [
    "*If you want to query data you can use the snippets menu, or create a search obj, and to display a table use `display_table(search_obj.table)` or `display_table(data_frame)`*\n",
    "\n",
    "To see a list of available helper functions run `%picatrixhelpers` in a cell, or to see a list of functions/magics use `%picatrixmagics`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bab2b3a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "search_obj = T.search.Search(sketch)\n",
    "search_obj.query_string = 'event_identifier:4624'\n",
    "search_obj.return_fields = \\\n",
    "    'datetime,timestamp_desc,human_readable,message,tag' + \\\n",
    "    'event_identifier,hostname,record_number,recovered' + \\\n",
    "    'strings,username,strings_parsed,logon_type,logon_process' + \\\n",
    "    'windows_domain,source_username,user_id,computer_name'\n",
    "# Let's set the date\n",
    "date_chip = T.search.DateIntervalChip()\n",
    "date_chip.date = '2025-03-31T00:00:00'\n",
    "# and the unit, we want days.. so that is d\n",
    "date_chip.unit = 'd'\n",
    "# And now how much time units we want before and after.\n",
    "date_chip.before = 90\n",
    "date_chip.after = 0\n",
    "# Add the date_chip to as search parameter\n",
    "search_obj.add_chip(date_chip)\n",
    "# Search results...\n",
    "#search_obj.to_pandas()\n",
    "login_data = search_obj.table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5b6af5f",
   "metadata": {},
   "source": [
    "### Investigate search results..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "730343c2",
   "metadata": {},
   "source": [
    "Some statistics..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9355d592",
   "metadata": {},
   "outputs": [],
   "source": [
    "# How many different accounts logged on?\n",
    "login_data.username.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e66e052",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What were the source logon types?\n",
    "# login_data will be of type 'pandas.core.frame.DataFrame'\n",
    "print(login_data.logon_type.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf8855bd",
   "metadata": {},
   "source": [
    "With this approach, we do not get the logon type as integer! We need to extract that by ourselves.\n",
    "\n",
    "The function `isolate_logon_type(str) -> dict` takes the message object from one single DataFrame row and converts it into a dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4532e1af",
   "metadata": {},
   "outputs": [],
   "source": [
    "def isolate_logon_type(message: str) -> dict:\n",
    "    '''\n",
    "    Get logon type as an integer from the original log message\n",
    "    '''\n",
    "    # Attributes are separated by newlines \n",
    "    res1 = message.split('\\\\n')\n",
    "    res2 = list()\n",
    "    # The message contains loads of tabs which are unwanted\n",
    "    for i in res1: \n",
    "        res2.append(i.replace('\\\\t', ''))\n",
    "    # Discard empty lines\n",
    "    res3 = list(filter(None, res2))\n",
    "    # [ ... , 'Logon Type:x' , ... ] --> { ... , 'Logon Type': x , ... }\n",
    "    dict_msg = dict()\n",
    "    for part in res3:\n",
    "        try:\n",
    "            part1, part2 = part.split(':')\n",
    "        except ValueError:\n",
    "            # There are still list items which do not contain a colon\n",
    "            if part.split(':')[0][0] == '[':\n",
    "                dict_msg['message'] = part.split(':')[0]\n",
    "                continue\n",
    "            else:\n",
    "                continue\n",
    "        if len(part1) > 30: \n",
    "            # These are the parts of the message with lengthy text but no data of value --> discard them\n",
    "            continue\n",
    "        try:\n",
    "            # From here, we should have a clean set of data.\n",
    "            dict_msg[part1] = part2\n",
    "        except IndexError:\n",
    "            # If not, we'll have to fix our stuff --> yell out!\n",
    "            raise\n",
    "    return dict_msg\n",
    "\n",
    "# Add the original logon type digit to the pandas DataFrame:\n",
    "# Refs: https://www.geeksforgeeks.org/adding-new-column-to-existing-dataframe-in-pandas/\n",
    "# Does not work:\n",
    "#login_data.assign(logon_type_orig = [isolate_logon_type(m).get('Logon Type') for m in login_data['message']])\n",
    "list_lto = list()\n",
    "for m in login_data['message']:\n",
    "    list_lto.append(isolate_logon_type(m).get('Logon Type'))\n",
    "login_data['logon_type_orig'] = list_lto\n",
    "\n",
    "# Print the augmented DataFrame\n",
    "# Omit all rows with logon type 0 or 5.\n",
    "df = login_data[\n",
    "    # conditions\n",
    "    # When dealing with multiple conditions, each condition must be surrounded by parentheses, \n",
    "    # and you can use the & operator for 'and' and | for 'or'. \n",
    "    (login_data['logon_type_orig'] != '0') & (login_data['logon_type_orig'] != '5')\n",
    "] \\\n",
    "[\n",
    "    # column selection\n",
    "    ['datetime', 'hostname', 'source_username', 'computer_name', 'username', 'logon_type_orig', 'logon_type']\n",
    "]\n",
    "# To print the whole dataframe, toggle some pandas options...\n",
    "# ONLY for this call!\n",
    "with pd.option_context('display.max_rows', None,\n",
    "                       'display.max_columns', None,\n",
    "                       'display.precision', 3,\n",
    "                       ):\n",
    "    display(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1ef3adf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Refs: https://colab.research.google.com/github/google/timesketch/blob/master/notebooks/colab-timesketch-demo.ipynb\n",
    "def GraphLogins(data_frame, machine_name=None):\n",
    "  \n",
    "  if machine_name:\n",
    "    data_slice = data_frame[data_frame.computer_name == machine_name]\n",
    "    title = 'Accounts Logged In - {0:s}'.format(machine_name)\n",
    "  else:\n",
    "    data_slice = data_frame\n",
    "    title = 'Accounts Logged In'\n",
    "    \n",
    "  data_grouped = data_slice[['username', 'datetime']].groupby('username', as_index=False).count()\n",
    "  data_grouped.rename(columns={'datetime': 'count'}, inplace=True)\n",
    "\n",
    "  return alt.Chart(data_grouped, width=400).mark_bar().encode(\n",
    "    x='username', y='count',\n",
    "    tooltip=['username', 'count']\n",
    "  ).properties(\n",
    "    title=title\n",
    "  ).interactive()\n",
    "\n",
    "GraphLogins(login_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "388508b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Refs: https://colab.research.google.com/github/google/timesketch/blob/master/notebooks/colab-timesketch-demo.ipynb\n",
    "login_data['day'] = login_data['datetime'].dt.strftime('%Y-%m-%d')\n",
    "\n",
    "def GraphScatterLogin(data_frame, machine_name=''):\n",
    "  if machine_name:\n",
    "    data_slice = data_frame[data_frame.computer_name == machine_name]\n",
    "    title = 'Accounts Logged In - {0:s}'.format(machine_name)\n",
    "  else:\n",
    "    data_slice = data_frame\n",
    "    title = 'Accounts Logged In'\n",
    "  \n",
    "  login_grouped = data_slice[['day', 'computer_name', 'username', 'message']].groupby(['day', 'computer_name', 'username'], as_index=False).count()\n",
    "  login_grouped.rename(columns={'message': 'count'}, inplace=True)\n",
    "    \n",
    "  brush = alt.selection_interval(encodings=['x'])\n",
    "  click = alt.selection_multi(encodings=['color'])\n",
    "  color = alt.Color('count:Q')\n",
    "\n",
    "  chart1 = alt.Chart(login_grouped).mark_point().encode(\n",
    "      x='day', \n",
    "      y='username',\n",
    "      color=alt.condition(brush, color, alt.value('lightgray')),\n",
    "  ).properties(\n",
    "      title=title,\n",
    "      width=600\n",
    "  ).add_selection(\n",
    "      brush\n",
    "  ).transform_filter(\n",
    "      click\n",
    "  )\n",
    "  \n",
    "  chart2 = alt.Chart(login_grouped).mark_bar().encode(\n",
    "      x='count',\n",
    "      y='username',\n",
    "      color=alt.condition(brush, color, alt.value('lightgray')),\n",
    "      tooltip=['count'],\n",
    "  ).transform_filter(\n",
    "      brush\n",
    "  ).properties(\n",
    "      width=600\n",
    "  ).add_selection(\n",
    "      click\n",
    "  )\n",
    "  \n",
    "  return chart1 & chart2\n",
    "\n",
    "GraphScatterLogin(login_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb751fd9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
