#cloud-config
#
hostname: ${hostname}
fqdn: ${fqdn}
# Configure APK
apk_repos:
  alpine_repo:
    base_url: 'http://dl-cdn.alpinelinux.org/alpine'
    community_enabled: true
    version: '${distro_release}'
# Update apk database and packages on first boot
package_update: true
#package_upgrade: true
#package_reboot_if_required: true
# Install packages
packages:
  - busybox-static
  - apk-tools-static
  - pwgen
  - htop
  - mandoc
  - man-pages
  - less
  - vim
  - less-doc
  - iptables
  - iptables-doc
  - connman-iptables
  - iptables-openrc
  - ip6tables
  - ip6tables-openrc
  - tcpdump
  - wget
  - unbound
  - bind-tools
  - py3-pyserial
  - py3-netifaces
# Set network options
manage_resolv_conf: true
resolv_conf:
  nameservers:
    - ${nameserver}
# Write files to prepare:
# * configure Firewall
# * enable routing
# * make network config semi-static
write_files:
  - path: /etc/iptables/rules-save
    permissions: '0600'
    owner: 'root:root'
    content: |
      # Generated by iptables-save
      *filter
      :INPUT DROP [0:0]
      :FORWARD ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      [0:0] -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      [0:0] -A INPUT -s 127.0.0.0/8 -j ACCEPT
      [0:0] -A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -m comment --comment "ACCEPT incoming icmp echo (ping) requests" -j ACCEPT
      [0:0] -A INPUT -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW -m comment --comment "ACCEPT ssh connections to port 22/tcp" -j ACCEPT
      [0:0] -A INPUT -i eth0 -p udp -m udp --dport 68 -m comment --comment "Accept DHCP traffic destined to the client service" -j ACCEPT
      [0:0] -A INPUT -i eth1 -p icmp -m icmp --icmp-type 8 -m comment --comment "Accept ICMP Echo Replies" -j ACCEPT
      [0:0] -A INPUT -i eth1 -p udp -m udp --dport 68 -m comment --comment "Accept DHCP traffic destined to the client service" -j ACCEPT
      [0:0] -A INPUT -i eth1 -p udp -m udp --dport 67 -m comment --comment "Accept DHCP requests" -j ACCEPT
      [0:0] -A INPUT -i eth1 -p udp -m udp --dport 53 -m comment --comment "Accept DNS requests" -j ACCEPT
      [0:0] -A INPUT -i eth1 -p udp -m udp --dport 123 -m comment --comment "Accept NTP requests" -j ACCEPT
      COMMIT
      # Completed
      # Generated by iptables-save
      *nat
      :PREROUTING ACCEPT [0:0]
      :INPUT ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      :POSTROUTING ACCEPT [0:0]
      [0:0] -A POSTROUTING -o eth0 -j MASQUERADE
      COMMIT
      # Completed
  - path: /etc/iptables/rules6-save
    permissions: '0600'
    owner: 'root:root'
    content: |
      # Generated by ip6tables-save
      *nat
      :PREROUTING ACCEPT [0:0]
      :INPUT ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      :POSTROUTING ACCEPT [0:0]
      COMMIT
      # Completed
      # Generated by ip6tables-save
      *filter
      :INPUT DROP [0:0]
      :FORWARD ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      [0:0] -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      [0:0] -A INPUT -s ::1/128 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -m conntrack --ctstate NEW -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 1 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 2 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 3 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 4 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 133 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 134 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 135 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 136 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 137 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 141 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 142 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -p ipv6-icmp -m icmp6 --icmpv6-type 130 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -p ipv6-icmp -m icmp6 --icmpv6-type 131 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -p ipv6-icmp -m icmp6 --icmpv6-type 132 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -p ipv6-icmp -m icmp6 --icmpv6-type 143 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 148 -j ACCEPT
      [0:0] -A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 149 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -p ipv6-icmp -m icmp6 --icmpv6-type 151 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -p ipv6-icmp -m icmp6 --icmpv6-type 152 -j ACCEPT
      [0:0] -A INPUT -s fe80::/10 -p ipv6-icmp -m icmp6 --icmpv6-type 153 -j ACCEPT
      COMMIT
      # Completed
  - path: /etc/sysctl.conf
    permissions: '0644'
    owner: 'root:root'
    content: |
      # content of this file will override /etc/sysctl.d/*
      net.ipv4.conf.default.rp_filter = 1
      net.ipv4.conf.all.rp_filter = 1
      net.ipv4.tcp_syncookies = 1
      net.ipv4.ip_forward = 1
  - path: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    permissions: '0644'
    owner: 'root:root'
    content: |
      network: {config: disabled}
  - path: /etc/network/interfaces
    permissions: '0644'
    owner: 'root:root'
    content: |
      auto lo
      iface lo inet loopback
      dns-nameservers ${nameserver}

      # NIC to the "external" world
      auto eth0
      iface eth0 inet dhcp
      #mtu 1442

      # NIC to the case network
      auto eth1
      iface eth1 inet static
      address ${internal_addr}/${internal_cidr}
      #mtu 1442

      # Dead NIC to use as blackhole if you need something with an IP address
      # Otherwise, a blackhole route will do:
      #   ip route add blackhole 192.168.0.195/32
      # ...which would swallow all traffic from and to 192.168.0.195/32
      auto vif0
      iface vif0 inet static
      pre-up /sbin/ip link add vif0 type dummy
      pre-up /sbin/ip link set up dev vif0
      up /sbin/ip link set vif0 promisc on
      down /sbin/ip link set vif0 promisc off
      address 192.168.255.254/24
  - path: /etc/unbound/unbound.conf
    permissions: '0644'
    owner: 'root:root'
    content: |
      server:
        verbosity: 1
        ## Specify the interface address to listen on:
        interface: ${internal_addr}
        ## To listen on all interfaces use:
        #interface: 0.0.0.0
        do-ip4: yes
        do-ip6: no
        do-udp: yes
        do-tcp: yes
        do-daemonize: yes
        access-control: ${internal_net}/${internal_cidr} allow
        ## Minimum lifetime of cache entries in seconds.  Default is 0.
        #cache-min-ttl: 60
        ## Maximum lifetime of cached entries. Default is 86400 seconds (1 day).
        cache-max-ttl: 3600
        ## enable to prevent answering id.server and hostname.bind queries.
        hide-identity: yes
        ## enable to prevent answering version.server and version.bind queries.
        hide-version: yes
        # print one line with time, IP, name, type, class for every query.
        log-queries: yes
        # print one line per reply, with time, IP, name, type, class, rcode,
        # timetoresolve, fromcache and responsesize.
        log-replies: yes
        # log with tag 'query' and 'reply' instead of 'info' for
        # filtering log-queries and log-replies from the log.
        log-tag-queryreply: yes
        # log the local-zone actions, like local-zone type inform is enabled
        # also for the other local zone types.
        log-local-actions: yes
        # print log lines that say why queries return SERVFAIL to clients.
        log-servfail: yes
      ## default is to use syslog, which will log to /var/log/messages.
      use-syslog: no
      ## to log elsewhere, set 'use-syslog' to 'no' and set the log file location below:
      logfile: /var/log/unbound.log
      python:
      remote-control:
        control-enable: no
      ## Note: for forward-zones, the destination servers must be able to handle recursion to other DNS servers
      forward-zone:
        name: "${internal_domain}"
        forward-addr: ${internal_dns}
      ## Forward all other queries to the specified DNS servers
      forward-zone:
        name: "."
        forward-addr: ${nameserver}
# If you want swap space, uncomment and adapt the following section
#swap:
#  filename: /swap.img
#  #size: "auto" # or size in bytes
#  #maxsize: 10485760   # size in bytes
#  # Set SWAP space to a fixed size of 100M
#  size: 104857600
# Users
#   Sourced from users-gateway.json
${replace(yamlencode("${users}"), "\"", "")}
# On each boot, do
bootcmd:
  - [ apk, upgrade, --update-cache, --available ]
  - [ hostname, "${fqdn}" ]
# On first boot, do
runcmd:
  - [ apk, upgrade, --update-cache, --available ]
  - [ sysctl, -p ]
  - [ iptables-restore, <, /etc/iptables/rules-save]
  - [ rc-update, add, iptables, default ]
  #- [ service, iptables, start ]
  - [ ip6tables-restore, <, /etc/iptables/rules6-save]
  - [ rc-update, add, ip6tables, default ]
  #- [ service, ip6tables, start ]
  - [ sed, -i, -e, 's/^#LogLevel INFO/LogLevel VERBOSE/', -e, 's/^AllowTcpForwarding no/AllowTcpForwarding yes/', -e, 's/^X11Forwarding no/X11Forwarding yes/', /etc/ssh/sshd_config ]
  #- [ service, sshd, restart ]
  - [ rc-update, add, unbound, default ]
  #- [ service, unbound, start ]
  #- [ wget, -q, -O, /root/user_data, http://169.254.169.254/openstack/latest/user_data ]
  ## REBOOT needed to bring up the network config suitable for gateway ops
  - [ busybox, reboot ]
# EOF .
#
